{"version":3,"sources":["airport.js","airports.js","main.js","mockedAirport.js"],"names":[],"mappings":"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","file":"all.js","sourcesContent":["export class Airport {\n\n  constructor(airport, el){\n    this.el = el\n    this.children = this.el.children\n    this.IATA = airport.IATA\n    this.delay = airport.delay\n    this.reason = airport.status.reason\n  }\n\n   update(property, value) {\n\n    if (this[property] !== value) {\n\n      let el\n        , prop\n        , child\n      for (prop in this.children){\n        let child = this.children[prop]\n\n        if (child.className == property){\n          el = child\n        }\n      }\n\n      el.innerHTML = value\n      this[property] = value\n    }\n\n  }\n}\n","export const airportCodes = [ 'ATL'\n                            , 'BNA'\n                            , 'BOS'\n                            , 'BWI'\n                            , 'CLE'\n                            , 'CLT'\n                            , 'CVG'\n                            , 'DCA'\n                            , 'DEN'\n                            , 'DFW'\n                            , 'DTW'\n                            , 'EWR'\n                            , 'FLL'\n                            , 'IAD'\n                            , 'IAH'\n                            , 'IND'\n                            , 'JFK'\n                            , 'LAS'\n                            , 'LAX'\n                            , 'LGA'\n                            , 'MCI'\n                            , 'MCO'\n                            , 'MDW'\n                            , 'MEM'\n                            , 'MIA'\n                            , 'MSP'\n                            , 'ORD'\n                            , 'PDX'\n                            , 'PHL'\n                            , 'PHX'\n                            , 'PIT'\n                            , 'RDU'\n                            , 'SAN'\n                            , 'SEA'\n                            , 'SFO'\n                            , 'SJC'\n                            , 'SLC'\n                            , 'STL'\n                            , 'TEB'\n                            , 'TPA'\n                            ]\n","import {airportCodes} from './airports'\nimport {Airport} from './airport'\n\n\nlet main = document.getElementsByTagName('main')[0]\n  , airportCodesStream =  Rx.Observable.fromArray(airportCodes)\n  , requestUrlStream = airportCodesStream\n      .map(code => `http://services.faa.gov/airport/status/${code}?format=json`)\n  , responseStream = requestUrlStream\n      .flatMap((url) => Rx.Observable.fromPromise(getAirport(url)))\n      // .flatMap((url) => Rx.Observable.fromPromise(jQuery.getJSON(url)))\n  , intervalResponseStream = Rx.Observable.interval(1000).timeInterval().take(3).flatMap(interval => responseStream)\n\nresponseStream\n  .subscribe((airportData) => {\n    airportData.delay = JSON.parse(airportData.delay)\n\n    let source = document.getElementById(\"airport-template\").innerHTML\n      , template = Handlebars.compile(source)\n      , airportTemplate = template(airportData)\n      , el = $(airportTemplate)[0]\n\n    main.appendChild(el)\n\n    let airport = new Airport(airportData, el)\n\n    intervalResponseStream\n      .filter(airportData => airportData.delay !== airport.delay)\n      .subscribe((airportData) => {\n          airport.update('delay', airportData.delay)\n        }\n      , err => console.error(err)\n      )\n\n    intervalResponseStream\n      .filter(airportData => airportData.status.reason !== airport.reason)\n      .subscribe((airportData) => { airport.update('reason', airportData.status.reason)}\n                , err => console.error(err)\n                )\n\n    }\n  , err => console.error(err)\n  )\n","function MockedAirport () {\n  this.IATA = 'JFK'\n  this.delay = false\n  this.status = { reason: 'Things are great!' }\n}\n\n\nfunction airportFactory () {\n  let airport = new MockedAirport()\n  const number = Math.random()\n\n  if (number > 0.5) {\n    airport.delay = !airport.delay\n    airport.status.reason = `Oh no, we're delayed: Reference Code: ${number}`\n  }\n\n  return airport\n}\n\nexport function getAirport(url){\n  return new Promise((res, rej) => {\n\n    setTimeout(() => {\n      let airport = airportFactory()\n      res(airport)\n    }, 500)\n  })\n}\n"],"sourceRoot":"/source/"}